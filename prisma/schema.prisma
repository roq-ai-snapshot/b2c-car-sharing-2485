generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions", "postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  extensions      = [pgcrypto]
}

model booking {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id        String   @db.Uuid
  car_id         String   @db.Uuid
  start_time     DateTime @db.Timestamp(6)
  end_time       DateTime @db.Timestamp(6)
  booking_status String   @db.VarChar(50)
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  car            car      @relation(fields: [car_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user           user     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model car {
  id            String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  make          String      @db.VarChar(100)
  model         String      @db.VarChar(100)
  year          Int
  color         String?     @db.VarChar(50)
  license_plate String      @unique @db.VarChar(20)
  company_id    String      @db.Uuid
  status        String      @db.VarChar(50)
  location      String?     @db.VarChar(255)
  created_at    DateTime    @default(now()) @db.Timestamp(6)
  updated_at    DateTime    @default(now()) @db.Timestamp(6)
  booking       booking[]
  company       company     @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  operation     operation[]
}

model company {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?     @db.VarChar
  address     String?     @db.VarChar(255)
  city        String?     @db.VarChar(100)
  state       String?     @db.VarChar(100)
  zip_code    String?     @db.VarChar(10)
  country     String?     @db.VarChar(100)
  name        String      @db.VarChar(255)
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  user_id     String      @db.Uuid
  tenant_id   String      @db.VarChar(255)
  car         car[]
  user        user        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  dashboard   dashboard[]
}

model dashboard {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String   @db.VarChar(255)
  company_id     String   @db.Uuid
  dashboard_type String   @db.VarChar(50)
  status         String   @db.VarChar(50)
  description    String?  @db.VarChar
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  company        company  @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model operation {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  operation_type   String   @db.VarChar(50)
  car_id           String   @db.Uuid
  operation_status String   @db.VarChar(50)
  start_time       DateTime @db.Timestamp(6)
  end_time         DateTime @db.Timestamp(6)
  staff_id         String   @db.Uuid
  created_at       DateTime @default(now()) @db.Timestamp(6)
  updated_at       DateTime @default(now()) @db.Timestamp(6)
  car              car      @relation(fields: [car_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user             user     @relation(fields: [staff_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String      @unique @db.VarChar(255)
  firstName   String?     @db.VarChar(255)
  lastName    String?     @db.VarChar(255)
  roq_user_id String      @db.VarChar(255)
  tenant_id   String      @db.VarChar(255)
  created_at  DateTime    @default(now()) @db.Timestamp(6)
  updated_at  DateTime    @default(now()) @db.Timestamp(6)
  booking     booking[]
  company     company[]
  operation   operation[]
}
